"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _uuid = require("uuid");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return {
    noColors: true,
    report: '',
    startTime: null,
    uaList: null,
    currentFixtureName: null,
    testCount: 0,
    singleVideoHash: null,
    screenshotsDir: null,
    videosDir: null,

    async reportTaskStart(startTime, userAgents, testCount, testStructure, taskProperties) {
      var _taskProperties$confi, _taskProperties$confi2, _taskProperties$confi3;

      this.startTime = startTime;
      this.uaList = userAgents.join(', ');
      this.testCount = testCount;
      this.screenshotsDir = taskProperties === null || taskProperties === void 0 ? void 0 : (_taskProperties$confi = taskProperties.configuration) === null || _taskProperties$confi === void 0 ? void 0 : (_taskProperties$confi2 = _taskProperties$confi.screenshots) === null || _taskProperties$confi2 === void 0 ? void 0 : _taskProperties$confi2.path;
      this.videosDir = taskProperties === null || taskProperties === void 0 ? void 0 : (_taskProperties$confi3 = taskProperties.configuration) === null || _taskProperties$confi3 === void 0 ? void 0 : _taskProperties$confi3.videoPath;
    },

    async reportFixtureStart(name) {
      this.currentFixtureName = this.escapeHtml(name);
    },

    _renderErrors(errs) {
      this.report += this.indentString('<failure>\n', 4);
      this.report += this.indentString('<![CDATA[', 4);
      errs.forEach((err, idx) => {
        err = this.formatError(err, `${idx + 1}) `);
        this.report += '\n';
        this.report += this.indentString(err, 6);
        this.report += '\n';
      });
      this.report += this.indentString(']]>\n', 4);
      this.report += this.indentString('</failure>\n', 4);
    },

    _correctAttachmentPath(baseDir, attachmentPath) {
      if (!baseDir) return attachmentPath;
      return _path.default.relative(baseDir, attachmentPath);
    },

    _renderAttachments(testRunInfo, hasScreenshots, hasVideos) {
      this.report += this.indentString('<system-out>\n', 4);
      this.report += this.indentString('<![CDATA[\n', 4);
      if (hasScreenshots && this.screenshotsDir) this.report += this.indentString(`[[screenshotsDir|${this.screenshotsDir}]]\n`, 6);
      if (hasVideos && this.videosDir) this.report += this.indentString(`[[videosDir|${this.videosDir}]]\n`, 6);

      if (hasScreenshots) {
        for (const screenshot of testRunInfo.screenshots) {
          const correctedPath = this._correctAttachmentPath(this.screenshotsDir, screenshot.screenshotPath);

          this.report += this.indentString(`[[screenshot|${correctedPath}|${(0, _uuid.v4)()}]]\n`, 6);
        }
      }

      if (hasVideos) {
        for (const video of testRunInfo.videos) {
          if (video.singleFile) this.singleVideoHash = this.singleVideoHash || (0, _uuid.v4)();
          const videoHash = video.singleFile ? this.singleVideoHash : (0, _uuid.v4)();

          const correctedPath = this._correctAttachmentPath(this.videosDir, video.videoPath);

          this.report += this.indentString(`[[video|${correctedPath}|${videoHash}]]\n`, 6);
        }
      }

      this.report += this.indentString(']]>\n', 4);
      this.report += this.indentString('</system-out>\n', 4);
    },

    async reportTestDone(name, testRunInfo) {
      var _testRunInfo$errs, _testRunInfo$screensh, _testRunInfo$videos;

      const hasErr = testRunInfo === null || testRunInfo === void 0 ? void 0 : (_testRunInfo$errs = testRunInfo.errs) === null || _testRunInfo$errs === void 0 ? void 0 : _testRunInfo$errs.length;
      const hasScreenshots = testRunInfo === null || testRunInfo === void 0 ? void 0 : (_testRunInfo$screensh = testRunInfo.screenshots) === null || _testRunInfo$screensh === void 0 ? void 0 : _testRunInfo$screensh.length;
      const hasVideos = testRunInfo === null || testRunInfo === void 0 ? void 0 : (_testRunInfo$videos = testRunInfo.videos) === null || _testRunInfo$videos === void 0 ? void 0 : _testRunInfo$videos.length;
      name = this.escapeHtml(name);
      const openTag = `<testcase classname="${this.currentFixtureName}" ` + `name="${name}" time="${testRunInfo.durationMs / 1000}">\n`;
      this.report += this.indentString(openTag, 2);
      if (testRunInfo.skipped) this.report += this.indentString('<skipped/>\n', 4);else if (hasErr) this._renderErrors(testRunInfo.errs);
      if (hasScreenshots || hasVideos) this._renderAttachments(testRunInfo, hasScreenshots, hasVideos);
      this.report += this.indentString('</testcase>\n', 2);
    },

    _renderWarnings(warnings) {
      this.setIndent(2).write('<system-out>').newline().write('<![CDATA[').newline().setIndent(4).write(`Warnings (${warnings.length}):`).newline();
      warnings.forEach(msg => {
        this.setIndent(4).write('--').newline().setIndent(0).write(this.indentString(msg, 6)).newline();
      });
      this.setIndent(2).write(']]>').newline().write('</system-out>').newline();
    },

    async reportTaskDone(endTime, passed, warnings, result) {
      const name = `TestCafe Tests: ${this.escapeHtml(this.uaList)}`;
      const time = (endTime - this.startTime) / 1000;
      this.write('<?xml version="1.0" encoding="UTF-8" ?>').newline().write(`<testsuite name="${name}" tests="${this.testCount}" failures="${result.failedCount}" ` + `skipped="${result.skippedCount}" time="${time}" ` + `timestamp="${endTime.toUTCString()}" id="${(0, _uuid.v4)()}">`).newline().write(this.report);
      if (warnings.length) this._renderWarnings(warnings);
      this.setIndent(0).write('</testsuite>');
    }

  };
}

module.exports = exports.default;